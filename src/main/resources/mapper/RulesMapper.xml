<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tiancheng.ms.dao.mapper.RulesMapper">
    <resultMap id="BaseResultMap" type="com.tiancheng.ms.entity.RulesEntity">
        <!-- generate by mybatis-generator-zy, don't modify -->
        <id column="id" property="id" jdbcType="INTEGER"/>
        <id column="product_id" property="productId" jdbcType="INTEGER"/>
        <id column="process_id" property="processId" jdbcType="INTEGER"/>
        <id column="intervals" property="intervals" jdbcType="INTEGER"/>
    </resultMap>

    <select id="selectByProductId" resultType="com.tiancheng.ms.dto.RulesDTO">
        select rules.*, process.name as procName from rules
        left join process on rules.process_id = process.id
        where product_id = #{productId}
    </select>

    <select id="queryOverTimeAlarmDTO" resultType="com.tiancheng.ms.dto.OverTimeAlarmDTO">
        select
        p1.produce_id as produceId, p1.product_id as productId, p1.process_id as processId,
        p4.code as produce_code, p2.code as product_code,
        p3.name as processName, p1.start_time as startTime,
        r.intervals as intervals
        from produce_process p1
        left join product p2 on p1.product_id = p2.id
        left join process p3 on p1.process_id = p3.id
        left join rules r on r.product_id = p2.id and r.process_id = p3.id
        left join produce p4 on p1.produce_id = p4.id
        where
        DATE_ADD(P1.start_time,INTERVAL r.intervals DAY) > now()
        and p1.status = 2;
    </select>

</mapper>